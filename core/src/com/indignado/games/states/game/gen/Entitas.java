package com.indignado.games.states.game.gen;

import java.util.Stack;
import com.ilargia.games.entitas.Context;
import com.ilargia.games.entitas.api.*;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class Entitas {

	public InputContext input;
	public GameContext game;
	public GuiContext gui;
	public SceneContext scene;
	public ActuatorContext actuator;

	public Entitas() {
		input = createInputContext();
		game = createGameContext();
		gui = createGuiContext();
		scene = createSceneContext();
		actuator = createActuatorContext();
	}

	public InputContext createInputContext() {
		return new InputContext(InputComponentIds.totalComponents, 0,
				new ContextInfo("Input", InputComponentIds.componentNames(),
						InputComponentIds.componentTypes()),
				factoryInputEntity());
	}

	public GameContext createGameContext() {
		return new GameContext(GameComponentIds.totalComponents, 0,
				new ContextInfo("Game", GameComponentIds.componentNames(),
						GameComponentIds.componentTypes()), factoryGameEntity());
	}

	public GuiContext createGuiContext() {
		return new GuiContext(GuiComponentIds.totalComponents, 0,
				new ContextInfo("Gui", GuiComponentIds.componentNames(),
						GuiComponentIds.componentTypes()), factoryGuiEntity());
	}

	public SceneContext createSceneContext() {
		return new SceneContext(SceneComponentIds.totalComponents, 0,
				new ContextInfo("Scene", SceneComponentIds.componentNames(),
						SceneComponentIds.componentTypes()),
				factorySceneEntity());
	}

	public ActuatorContext createActuatorContext() {
		return new ActuatorContext(ActuatorComponentIds.totalComponents, 0,
				new ContextInfo("Actuator", ActuatorComponentIds
						.componentNames(), ActuatorComponentIds
						.componentTypes()),
				factoryActuatorEntity());
	}

	public Context[] allContexts() {
		return new Context[]{input, game, gui, scene, actuator};
	}

	public FactoryEntity<InputEntity> factoryInputEntity() {
		return (int totalComponents, Stack<IComponent>[] componentContexts,
				ContextInfo contextInfo) -> {
			return new InputEntity(totalComponents, componentContexts,
					contextInfo);
		};
	}

	public FactoryEntity<GameEntity> factoryGameEntity() {
		return (int totalComponents, Stack<IComponent>[] componentContexts,
				ContextInfo contextInfo) -> {
			return new GameEntity(totalComponents, componentContexts,
					contextInfo);
		};
	}

	public FactoryEntity<GuiEntity> factoryGuiEntity() {
		return (int totalComponents, Stack<IComponent>[] componentContexts,
				ContextInfo contextInfo) -> {
			return new GuiEntity(totalComponents, componentContexts,
					contextInfo);
		};
	}

	public FactoryEntity<SceneEntity> factorySceneEntity() {
		return (int totalComponents, Stack<IComponent>[] componentContexts,
				ContextInfo contextInfo) -> {
			return new SceneEntity(totalComponents, componentContexts,
					contextInfo);
		};
	}

	public FactoryEntity<ActuatorEntity> factoryActuatorEntity() {
		return (int totalComponents, Stack<IComponent>[] componentContexts,
				ContextInfo contextInfo) -> {
			return new ActuatorEntity(totalComponents, componentContexts,
					contextInfo);
		};
	}
}